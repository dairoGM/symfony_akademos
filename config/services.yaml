# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  env_config: '%env(ENV_CONFIG)%'

  dbname: '%env(DB_NAME)%'
  user: '%env(DB_USER)%'
  password: '%env(DB_PASS)%'
  host: '%env(DB_HOST)%'
  driver: 'pdo_pgsql'
  port: '%env(DB_PORT)%'

  estructura_1: '%env(ESTRUCTURA_1)%'
  tipo_plan_anual: '%env(TIPO_PLAN_ANUAL)%'
  tipo_plan_mensual: '%env(TIPO_PLAN_MENSUAL)%'
  estado_inicial_plan: '%env(ESTADO_INICIAL_PLAN)%'

  xsl_path: '%kernel.project_dir%/public/xsl/'
  xml_temp: '%kernel.project_dir%/public/temp/'
  pdf_temp: '%kernel.project_dir%/public/temp/'
  fop_exc: '%kernel.project_dir%/bin/fop/fop'

  accion_registrar: '%env(accion_registrar)%'
  accion_modificar: '%env(accion_modificar)%'
  accion_eliminar: '%env(accion_eliminar)%'
  accion_inicio_sesion: '%env(accion_inicio_sesion)%'
  accion_cierre_sesion: '%env(accion_cierre_sesion)%'

  tipo_traza_sesion: '%env(tipo_traza_sesion)%'
  tipo_traza_negocio: '%env(tipo_traza_negocio)%'


  objeto_autenticacion: '%env(objeto_autenticacion)%'
  objeto_institucion: '%env(objeto_institucion)%'
  objeto_solicitud_programa: '%env(objeto_solicitud_programa)%'

  id_categoria_estructura_ies: '%env(id_categoria_estructura_ies)%'
  id_categoria_estructura_facultad: '%env(id_categoria_estructura_facultad)%'
  id_categoria_estructura_cum: '%env(id_categoria_estructura_cum)%'
  id_categoria_estructura_fum: '%env(id_categoria_estructura_fum)%'
  id_tipo_solicitud_red: '%env(id_tipo_solicitud_red)%'
  id_tipo_solicitud_propio: '%env(id_tipo_solicitud_propio)%'
  id_tipo_solicitud_clasificacion_nuevo: '%env(id_tipo_solicitud_clasificacion_nuevo)%'
  id_tipo_solicitud_clasificacion_exitente: '%env(id_tipo_solicitud_clasificacion_exitente)%'

  IB_API_RI_URL: '%env(IB_API_RI_URL)%'
  API_FUC: '%env(API_FUC)%'

  estado_salida_creada: '%env(estado_salida_creada)%'
  estado_salida_firmada: '%env(estado_salida_firmada)%'
  estado_salida_aprobada_rd: '%env(estado_salida_aprobada_rd)%'
  estado_salida_revision: '%env(estado_salida_revision)%'
  estado_salida_firmado_directivo: '%env(estado_salida_firmado_directivo)%'
  estado_salida_tramite: '%env(estado_salida_tramite)%'
  estado_salida_viajando: '%env(estado_salida_viajando)%'
  estado_salida_finalizada: '%env(estado_salida_finalizada)%'
  estado_salida_listo: '%env(estado_salida_listo)%'

  tramite_confeccion_pasaporte: '%env(tramite_confeccion_pasaporte)%'


  estado_evaluacion_solicitada: '%env(estado_evaluacion_solicitada)%'
  estado_evaluacion_revision: '%env(estado_evaluacion_revision)%'
  estado_evaluacion_aceptada: '%env(estado_evaluacion_aceptada)%'
  estado_evaluacion_rechazada: '%env(estado_evaluacion_rechazada)%'
  estado_evaluacion_pendiente_informe: '%env(estado_evaluacion_pendiente_informe)%'
  estado_evaluacion_informe_aprobado: '%env(estado_evaluacion_informe_aprobado)%'
  estado_evaluacion_informe_rechazado: '%env(estado_evaluacion_informe_rechazado)%'
  estado_evaluacion_asignada_comision: '%env(estado_evaluacion_asignada_comision)%'
  estado_evaluacion_pendiente_plan_trabajo: '%env(estado_evaluacion_pendiente_plan_trabajo)%'
  estado_evaluacion_plan_trabajo_aprobado: '%env(estado_evaluacion_plan_trabajo_aprobado)%'
  estado_evaluacion_plan_trabajo_rechazado: '%env(estado_evaluacion_plan_trabajo_rechazado)%'
  estado_evaluacion_iniciar_proceso: '%env(estado_evaluacion_iniciar_proceso)%'
  estado_evaluacion_en_evaluacion: '%env(estado_evaluacion_en_evaluacion)%'
  estado_evaluacion_dictamen_cte: '%env(estado_evaluacion_dictamen_cte)%'
  estado_evaluacion_dictamen_jan: '%env(estado_evaluacion_dictamen_jan)%'



services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    bind:
      $dbname: '%env(resolve:DB_NAME)%'
      $user: '%env(resolve:DB_USER)%'
      $password: '%env(resolve:DB_PASS)%'
      $host: '%env(resolve:DB_HOST)%'
      $driver: 'pdo_pgsql'
      $port: '%env(resolve:DB_PORT)%'
  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/'
    exclude:
      - '../src/DependencyInjection/'
      - '../src/Entity/'
      - '../src/Kernel.php'
      - '../src/Tests/'
      - '../src/Services/ReportFop.php'
      - '../src/ExtendSys/'

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\Controller\:
    resource: '../src/Controller/'
    tags: [ 'controller.service_arguments' ]

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones
  #chat.event.security_authentication_success:
  #    class: App\EventListener\AuthenticationChatListener
  #    tags:
  #        - { name: kernel.event_listener, event: security.authentication.success, method: onLoginChat }

  idxboost_api.event.authentication_success_listener:
    class: App\EventListener\AuthenticationSuccessListener
    tags:
      - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }


  App\EventListener\CustomLogoutListener:
    tags:
      - name: 'kernel.event_listener'
        event: 'Symfony\Component\Security\Http\Event\LogoutEvent'
        dispatcher: security.event_dispatcher.main

  idxboost_api.event.jwt_created_listener:
    class: App\EventListener\JWTCreatedListener
    arguments: [ '@request_stack', '@service_container' ]
    tags:
      - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

  idxboost_api.event.jwt_decoded_listener:
    class: App\EventListener\JWTDecodedListener
    arguments: [ '@request_stack', '@service_container' ]
    tags:
      - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_decoded, method: onJWTDecoded }

  doctrine_listener.prepersist:
    class: App\EventListener\DoctrineListener
    arguments: [ '@service_container' ]
    tags:
      - { name: doctrine.event_listener, event: prePersist }

