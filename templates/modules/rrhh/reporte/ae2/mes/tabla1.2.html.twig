{% block stylesheets %}
    <style>


        /* Estilo para el botón de exportación */
        #exportExcelBtn {
            background-color: #28a745;
            border-color: #28a745;
            padding: 0.25rem 0.75rem;
            font-size: 0.8rem;
            transition: all 0.3s;
            display: inline-flex;
            align-items: center;
        }

        #exportExcelBtn:hover {
            background-color: #218838;
            border-color: #1e7e34;
            transform: translateY(-1px);
        }

        #exportExcelBtn i {
            margin-right: 5px;
            font-size: 0.9rem;
        }

        /* Estilos para el header del modal */
        .modal-header {
            display: flex;
            align-items: center;
            padding: 0.75rem 1.25rem;
        }

        .modal-title {
            margin-right: auto; /* Empuja el título a la izquierda */
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        /* Botón de exportación */
        #exportExcelBtn {
            background-color: #28a745;
            border-color: #28a745;
            padding: 0.25rem 0.75rem;
            font-size: 0.8rem;
            white-space: nowrap;
            order: 1; /* Asegura que el botón esté antes del de cerrar */
        }

        /* Botón de cerrar */
        .modal-header .close {
            order: 2; /* Asegura que esté al final */
            margin-left: 0.5rem;
        }
    </style>
{% endblock %}
<div class="table-responsive">
    <table class="table table-striped table-bordered table-indicadores" id="tablaDetalleTrabajadores">
        <thead>
        <tr>
            <th class="col-indicador">CES</th>
            <th class="col-mes">Plantilla aprobada</th>
            <th class="col-mes">Plantilla cubierta</th>
            <th class="col-mes">Promedio trabajadores</th>
            <th class="col-mes">Plazas vacantes</th>
            <th class="col-mes">(%) cubrimiento</th>
        </tr>
        </thead>
        <tbody>
        {% set total_aprobada = 0 %}
        {% set total_cubierta = 0 %}
        {% set total_promedio = 0 %}
        {% set total_vacantes = 0 %}

        {% for fila in datos %}
            {% if fila.aprobada != 0 or fila.cubierta != 0 or fila.promedio != 0 or fila.vacantes != 0 %}
                <tr class="{{ fila.es_subtotal ? 'font-weight-bold' : '' }}">
                    <td class="col-indicador">{{ fila.ces }}</td>
                    <td class="text-center">{{ fila.aprobada|number_format(0, ',', '.') }}</td>
                    <td class="text-center">{{ fila.cubierta|number_format(0, ',', '.') }}</td>
                    <td class="text-center">{{ fila.promedio|number_format(0, ',', '.') }}</td>
                    <td class="text-center">{{ fila.vacantes|number_format(0, ',', '.') }}</td>
                    <td class="text-center">{{ fila.cubrim|number_format(1, ',', '.') }}</td>
                </tr>

                {# Acumular totales si no es un subtotal #}
                {% if not fila.es_subtotal %}
                    {% set total_aprobada = total_aprobada + fila.aprobada %}
                    {% set total_cubierta = total_cubierta + fila.cubierta %}
                    {% set total_promedio = total_promedio + fila.promedio %}
                    {% set total_vacantes = total_vacantes + fila.vacantes %}
                {% endif %}
            {% endif %}
        {% else %}
            <tr>
                <td colspan="6" class="text-center">No hay datos disponibles</td>
            </tr>
        {% endfor %}

        {# Fila de total general #}
        {% if datos|length > 0 %}
            <tr class="font-weight-bold bg-light">
                <td class="col-indicador">TOTAL GENERAL</td>
                <td class="text-center">{{ total_aprobada|number_format(0, ',', '.') }}</td>
                <td class="text-center">{{ total_cubierta|number_format(0, ',', '.') }}</td>
                <td class="text-center">{{ total_promedio|number_format(0, ',', '.') }}</td>
                <td class="text-center">{{ total_vacantes|number_format(0, ',', '.') }}</td>
                <td class="text-center">
                    {% if total_aprobada > 0 %}
                    {{ ((total_cubierta / total_aprobada) * 100)|number_format(1, ',', '.') }}
                {% else %}
                    0.0
                    {% endif %}%
                </td>
            </tr>
        {% endif %}
        </tbody>
    </table>
</div>
<script src="{{ asset('assets/js/excel/exceljs.js') }}"></script>
<script src="{{ asset('assets/js/excel/fileSaver.js') }}"></script>

<script>
    $(document).on('click', '#exportExcelBtn', async function () {
        const $btn = $(this);

        // Si el botón ya está deshabilitado, no hacer nada (evitar múltiples clics)
        if ($btn.prop('disabled')) return;

        // Deshabilitar el botón para evitar múltiples clics
        $btn.prop('disabled', true);

        try {
            const workbook = new ExcelJS.Workbook();
            const worksheet = workbook.addWorksheet('1.2M');

            // Obtener fecha del título del modal
            const modalTitle = $('#modalDetalleMesLabel').text();
            const fechaMatch = modalTitle.match(/(\w+)\s(\d{4})$/);
            const fecha = fechaMatch ? `${fechaMatch[1].toUpperCase()} ${fechaMatch[2]}` : 'DICIEMBRE 2024';

            // 1. Encabezado principal (fila 1)
            const headerRow1 = worksheet.addRow([]);
            headerRow1.getCell(1).value = 'NÚMERO DE TRABAJADORES';
            headerRow1.getCell(3).value = 'TABLA: 1.2';
            headerRow1.getCell(1).font = {bold: true, size: 12};
            headerRow1.getCell(3).font = {bold: true, size: 12};

            // 2. Fila de fecha (fila 2)
            const headerRow2 = worksheet.addRow([]);
            headerRow2.getCell(3).value = `FECHA: ${fecha}`;
            headerRow2.getCell(3).font = {bold: true};

            // 3. Encabezados de tabla (filas 3 y 4)
            const headerRow3 = worksheet.addRow(['CES', 'PLANTILLA', 'PLANTILLA', 'Promedio', 'Plazas vacantes', '% cubrim']);
            const headerRow4 = worksheet.addRow(['', 'APROBADA', 'CUBIERTA', 'trabajadores', '', '']);
            headerRow3.font = {bold: true};
            headerRow4.font = {bold: true};

            // Obtener y agregar datos principales
            const table = document.getElementById('tablaDetalleTrabajadores');
            const rows = table.querySelectorAll('tbody tr');

            // Datos para calcular subtotales
            let totalAprobada = 0;
            let totalCubierta = 0;
            let totalPromedio = 0;
            let totalVacantes = 0;

            // Función para agregar filas con formato condicional
            const addFormattedRow = (values) => {
                const row = worksheet.addRow(values);
                // Aplicar negrita si la primera celda contiene "Subtotal" o "Total" (sin distinción de mayúsculas/minúsculas)
                if (values[0] && (values[0].toString().toLowerCase().includes('subtotal') ||
                    values[0].toString().toLowerCase().includes('total'))) {
                    row.font = {bold: true};
                }
                return row;
            };

            // Procesar cada fila de la tabla
            rows.forEach(row => {
                const rowData = [];
                row.querySelectorAll('td').forEach((td, index) => {
                    let value = td.innerText.trim();

                    // Convertir valores numéricos
                    if (index > 0) { // Todas las columnas excepto CES
                        value = value.replace('.', '').replace(',', '.');
                        value = isNaN(value) ? null : Number(value);

                        // Acumular para subtotales
                        if (value !== null) {
                            if (index === 1) totalAprobada += value;
                            if (index === 2) totalCubierta += value;
                            if (index === 3) totalPromedio += value;
                            if (index === 4) totalVacantes += value;
                        }
                    }
                    rowData.push(value);
                });

                // Usar la función addFormattedRow para mantener consistencia
                addFormattedRow(rowData);
            });

            // 5. Aplicar formatos numéricos
            worksheet.eachRow({includeEmpty: false}, (row, rowNumber) => {
                // Columnas B-E (números enteros con separador de miles)
                for (let col = 2; col <= 5; col++) {
                    if (row.getCell(col).value !== null && typeof row.getCell(col).value === 'number') {
                        row.getCell(col).numFmt = '#,##0';
                    }
                }
                // Columna F (porcentaje con 1 decimal)
                if (row.getCell(6).value !== null && typeof row.getCell(6).value === 'number') {
                    row.getCell(6).numFmt = '0.0';
                }

                // Aplicar negrita a filas existentes que contengan "Subtotal" o "Total"
                const firstCellValue = row.getCell(1).value;
                if (firstCellValue && (firstCellValue.toString().toLowerCase().includes('subtotal') ||
                    firstCellValue.toString().toLowerCase().includes('total'))) {
                    row.font = {bold: true};
                }
            });

            // 6. Ajustar anchos de columna
            worksheet.columns = [
                {key: 'ces', width: 20},        // CES
                {key: 'aprobada', width: 12},   // PLANTILLA APROBADA
                {key: 'cubierta', width: 12},   // PLANTILLA CUBIERTA
                {key: 'promedio', width: 15},   // Promedio trabajadores
                {key: 'vacantes', width: 12},   // Plazas vacantes
                {key: 'cubrim', width: 10}      // cubrim
            ];

            // 7. Generar archivo con método más controlado
            const buffer = await workbook.xlsx.writeBuffer();
            const fileName = `TABLA 1.2 - ${fecha.replace(' ', '_')}.xlsx`;

            // Crear enlace de descarga temporal
            const blob = new Blob([buffer], {type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'});
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = fileName;
            a.style.display = 'none';

            // Agregar al documento y hacer clic
            document.body.appendChild(a);
            a.click();

            // Limpiar después de 100ms
            setTimeout(() => {
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            }, 100);

        } catch (error) {
            console.error('Error al exportar:', error);
            alert('Ocurrió un error al generar el reporte');
        } finally {
            // Rehabilitar el botón después de 1 segundo (incluso si hay error)
            setTimeout(() => {
                $btn.prop('disabled', false);
            }, 1000);
        }
    });
</script>